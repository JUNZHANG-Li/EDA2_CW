# filename: deploy_minio_distributed.yaml (Use minio-user, check RPM, templates in files/)
---
- name: Deploy MinIO Server in Distributed Mode on Workers using RPM
  hosts: workers
  become: true

  vars:
    # MinIO Configuration
    minio_package_name: "minio" # Package name likely used by RPM
    minio_rpm_url: "https://dl.min.io/server/minio/release/linux-amd64/minio.rpm"
    minio_service_name: "minio"
    minio_data_dir: "/data/minio-data"
    minio_root_user: "minioadmin" # CHANGE THIS
    minio_root_password: "minioStrongPassword123" # CHANGE THIS
    minio_env_file: "/etc/default/minio" # VERIFY THIS PATH!
    minio_service_user: "minio-user"
    minio_service_group: "minio-user"

    # --- Corrected Path for Templates ---
    local_env_template: "./files/minio_env.j2"
    # local_service_template: "./files/minio.service.j2" # Only needed if overriding

  tasks:
    - name: Ensure essential packages are present
      ansible.builtin.package:
        name:
         - wget
         - policycoreutils-python-utils
        state: present
        update_cache: yes
      ignore_errors: yes

    # --- Install MinIO via RPM (Conditional) ---
    - name: Check if MinIO package is already installed
      ansible.builtin.package_facts:
        manager: auto # Detects dnf/yum automatically

    - name: Install MinIO from RPM URL if not already installed
      ansible.builtin.dnf: # Or yum
        name: "{{ minio_rpm_url }}"
        state: present
        disable_gpg_check: yes
      # Run only if the package isn't found in package_facts
      when: minio_package_name not in ansible_facts.packages

    # --- User and Group Creation ---
    - name: Ensure MinIO service group exists
      ansible.builtin.group:
        name: "{{ minio_service_group }}"
        state: present
        system: yes

    - name: Ensure MinIO service user exists
      ansible.builtin.user:
        name: "{{ minio_service_user }}"
        group: "{{ minio_service_group }}"
        system: yes
        create_home: no
        shell: /sbin/nologin
        state: present

    # --- Configure Environment Variables ---
    - name: Ensure MinIO environment directory exists
      ansible.builtin.file:
        path: "{{ minio_env_file | dirname }}"
        state: directory
        mode: '0755'

    - name: Configure MinIO environment variables
      ansible.builtin.template:
        src: "{{ local_env_template }}" # Uses path from vars
        dest: "{{ minio_env_file }}"
        owner: root
        group: root
        mode: '0640'
      register: minio_env_config

    # --- Prepare Storage Directory ---
    - name: Ensure MinIO data directory exists on /data mount with correct ownership
      ansible.builtin.file:
        path: "{{ minio_data_dir }}"
        state: directory
        owner: "{{ minio_service_user }}"
        group: "{{ minio_service_group }}"
        mode: '0770'

    # Optional: SELinux context tasks
    - name: Set SELinux context for MinIO data directory (if SELinux is enforcing)
      ansible.builtin.sefcontext:
        target: '{{ minio_data_dir }}(/.*)?'
        setype: 'minio_var_lib_t'
        state: present
      notify: Restore SELinux Contexts
      ignore_errors: yes

    - name: Apply SELinux context changes immediately
      ansible.builtin.command: "restorecon -R -v {{ minio_data_dir }}"
      changed_when: false
      when: ansible_selinux is defined and ansible_selinux.status == "enabled" and ansible_selinux.mode == "enforcing"
      ignore_errors: yes

    # --- Configure Systemd Service (Optional Override - KEEP COMMENTED INITIALLY) ---
    # - name: Create MinIO systemd service file from template (Optional Override)
    #   ansible.builtin.template:
    #     src: "{{ local_service_template }}" # Path uses files/ now
    #     dest: /etc/systemd/system/minio.service
    #     owner: root
    #     group: root
    #     mode: '0644'
    #   register: minio_service_file

    # --- Start and Enable Service ---
    - name: Reload systemd daemon (if env file or optional service file changed)
      ansible.builtin.systemd:
        daemon_reload: yes
      when: minio_env_config.changed or (minio_service_file is defined and minio_service_file.changed)

    - name: Enable and ensure MinIO service is started
      ansible.builtin.systemd:
        name: "{{ minio_service_name }}"
        state: started
        enabled: yes

    - name: Restart MinIO service if environment variables changed
      ansible.builtin.systemd:
        name: "{{ minio_service_name }}"
        state: restarted
      when: minio_env_config.changed

    - name: Wait briefly for service to initialize
      ansible.builtin.pause:
        seconds: 15

    # --- Verification ---
    - name: Check MinIO service status
      ansible.builtin.command: "systemctl is-active {{ minio_service_name }}"
      register: minio_status
      changed_when: false
      failed_when: minio_status.rc != 0

    - name: Display MinIO status and access info
      ansible.builtin.debug:
        msg:
          - "{{ minio_service_name }} service is active on {{ inventory_hostname }}."
          - "Access API/Client via: http://{{ ansible_default_ipv4.address }}:9000"
          - "Access Console via: http://{{ ansible_default_ipv4.address }}:9001"
          - "Use User: {{ minio_root_user }} / Pass: [REDACTED - Use Vault!]"
      when: minio_status.rc == 0

  # # --- Optional Handler for SELinux ---
  # handlers:
  #   - name: Restore SELinux Contexts
  #     ansible.builtin.command: "restorecon -R -v {{ minio_data_dir }}"
  #     listen: Restore SELinux Contexts