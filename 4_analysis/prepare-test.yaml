# playbooks/prepare_host_for_test.yml
---
- name: Prepare Host Node for Capacity Test
  hosts: hostnode # Run this only on the host node
  become: true    # Needed for installing packages and writing to standard locations

  vars:
    # --- Directory Configuration on Host Node ---
    base_dir: "/opt/comp0239_coursework" # Base directory for coursework files
    metadata_dir: "{{ base_dir }}/metadata"   # Directory for downloaded parquet files
    scripts_dir: "{{ base_dir }}/scripts"     # Directory for our python scripts
    output_dir: "{{ base_dir }}/output"      # Directory for the final ID list & test results

    # --- Output File Configuration ---
    id_list_file_name: "image_ids_to_process.txt"
    id_list_file_path: "{{ output_dir }}/{{ id_list_file_name }}" # Full path to the generated ID list

    # --- Parquet File Download ---
    # !! Replace with ACTUAL download URLs from Hugging Face !!
    parquet_file_urls:
      - url: "https://huggingface.co/datasets/bitmind/open-images-v7/resolve/main/data/train-00000-of-00002.parquet?download=true"
        filename: "train-00000-of-00002.parquet"
      - url: "https://huggingface.co/datasets/bitmind/open-images-v7/resolve/main/data/train-00001-of-00002.parquet?download=true"
        filename: "train-00001-of-00002.parquet"

    # --- Generator Script Configuration ---
    # Assumes generate_id_list.py is in the *same directory* as this playbook file locally
    generator_script_local_path: "./generate_id_list.py" # LOCAL path
    generator_script_remote_path: "{{ scripts_dir }}/generate_id_list.py" # REMOTE path on host node

    # Arguments for the generator script (verify image_id_column!)
    image_id_column: "image_id" 
    target_id_pool_count: 15000000 # Generate a large pool, > expected 24h throughput

    # --- Test Runner Script Configuration ---
    # Assumes run_capacity_test.py is in the *same directory* as this playbook file locally
    runner_script_local_path: "./run_capacity_test.py" # LOCAL path
    runner_script_remote_path: "{{ scripts_dir }}/run_capacity_test.py" # REMOTE path on host node

  tasks:
    # 1. System Setup
    - name: Ensure target directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: root # Or a dedicated user
        group: root
      loop:
        - "{{ base_dir }}"
        - "{{ metadata_dir }}"
        - "{{ scripts_dir }}"
        - "{{ output_dir }}"

    - name: Install OS dependencies (wget, python3-pip)
      ansible.builtin.package:
        name:
          - wget
          - python3-pip
        state: present
        update_cache: yes

    - name: Install Python dependencies (pandas, pyarrow for generator; requests, dask, distributed for runner)
      ansible.builtin.pip:
        name:
          - pandas>=1.0 # Specify versions if needed
          - pyarrow>=10.0
          - requests>=2.0
          - dask>=2023.0 # Match versions if necessary
          - distributed>=2023.0 
          # Add torch, torchvision, Pillow dependencies here IF running test script requires them directly on host
          # Usually only needed on workers, but good practice to have dask/distributed matching runner script
        state: present
        executable: pip3

    # 2. Download Parquet Files
    - name: Download OpenImages Parquet files
      ansible.builtin.get_url:
        url: "{{ item.url }}"
        dest: "{{ metadata_dir }}/{{ item.filename }}"
        mode: '0644'
        force: no # Avoid re-downloading
      loop: "{{ parquet_file_urls }}"
      register: download_results
      until: download_results is succeeded
      retries: 3
      delay: 5

    # 3. Deploy Python Scripts
    - name: Copy Image ID list generator script to host node
      ansible.builtin.copy:
        src: "{{ generator_script_local_path }}" # LOCAL
        dest: "{{ generator_script_remote_path }}" # REMOTE
        mode: '0755'

    - name: Copy Capacity Test runner script to host node
      ansible.builtin.copy:
        src: "{{ runner_script_local_path }}" # LOCAL
        dest: "{{ runner_script_remote_path }}" # REMOTE
        mode: '0755'

    # 4. Run Generator Script to Create ID Pool File
    - name: Execute image ID list generator script (if list doesn't exist)
      ansible.builtin.command:
        cmd: >
          python3 {{ generator_script_remote_path }}
          --meta-dir {{ metadata_dir }}
          --id-col {{ image_id_column }}
          --output {{ id_list_file_path }}
          --count {{ target_id_pool_count }}
        creates: "{{ id_list_file_path }}" # Makes this step idempotent
      register: script_execution
      changed_when: script_execution.rc == 0 and "'Successfully wrote' in script_execution.stdout"
      failed_when: script_execution.rc != 0

    # 5. Verification (Optional)
    - name: Verify output ID list file exists
      ansible.builtin.stat:
        path: "{{ id_list_file_path }}"
      register: output_file_stat
      when: script_execution is succeeded

    - name: Fail if ID list file was not created
      ansible.builtin.fail:
        msg: "Image ID list generation failed. Check script logs or run manually on host. stdout: {{ script_execution.stdout | default('N/A') }} stderr: {{ script_execution.stderr | default('N/A') }}"
      when:
        - script_execution is succeeded
        - not output_file_stat.stat.exists

    - name: Display path to generated ID list file
      ansible.builtin.debug:
         msg: "Image ID list prepared at {{ id_list_file_path }} on host {{ inventory_hostname }}"
      when: output_file_stat.stat.exists