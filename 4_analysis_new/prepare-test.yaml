# Filename: prepare-test.yaml (URL Version with Ownership Fix - Corrected Order)
- name: Prepare Host Node for Capacity Test
  hosts: hostnode
  become: true

  vars:
    base_dir: "/opt/comp0239_coursework"
    metadata_dir: "{{ base_dir }}/metadata"
    scripts_dir: "{{ base_dir }}/scripts"
    output_dir: "{{ base_dir }}/output"
    target_user: almalinux # Define the user variable

    url_list_file_name: "image_urls_to_process.txt"
    url_list_file_path: "{{ output_dir }}/{{ url_list_file_name }}"

    parquet_file_urls:
      - url: "https://huggingface.co/datasets/bitmind/open-images-v7/resolve/main/data/train-00000-of-00002.parquet?download=true"
        filename: "train-00000-of-00002.parquet"
      - url: "https://huggingface.co/datasets/bitmind/open-images-v7/resolve/main/data/train-00001-of-00002.parquet?download=true"
        filename: "train-00001-of-00002.parquet"

    generator_script_local_path: "./generate_id_list.py"
    generator_script_remote_path: "{{ scripts_dir }}/generate_id_list.py"

    url_column_name: "url"
    target_url_pool_count: 15000000

    runner_script_local_path: "./run_capacity_test.py"
    runner_script_remote_path: "{{ scripts_dir }}/run_capacity_test.py"

  tasks:
    # 1. System Setup
    - name: Ensure target directories exist and have correct ownership
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
      loop:
        - "{{ base_dir }}"
        - "{{ metadata_dir }}"
        - "{{ scripts_dir }}"
        - "{{ output_dir }}"

    - name: Install OS dependencies (wget, python3-pip)
      ansible.builtin.package:
        name:
          - wget
          - python3-pip
        state: present
        update_cache: yes

    - name: Install Python dependencies for scripts
      ansible.builtin.pip:
        name:
          - pandas>=1.0
          - pyarrow>=10.0
          - requests>=2.0
          - dask>=2023.0
          - distributed>=2023.0
          - Pillow>=9.0
          - torch
          - torchvision
        state: present
        executable: pip3

    # 2. Download Parquet Files
    - name: Download OpenImages Parquet files
      ansible.builtin.get_url:
        url: "{{ item.url }}"
        dest: "{{ metadata_dir }}/{{ item.filename }}"
        mode: '0644'
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        force: no
      loop: "{{ parquet_file_urls }}"
      register: download_results
      until: download_results is succeeded
      retries: 3
      delay: 5

    # 3. Deploy Python Scripts
    - name: Copy URL list generator script to host node
      ansible.builtin.copy:
        src: "{{ generator_script_local_path }}"
        dest: "{{ generator_script_remote_path }}"
        mode: '0755'
        owner: "{{ target_user }}"
        group: "{{ target_user }}"

    - name: Copy Capacity Test runner script to host node
      ansible.builtin.copy:
        src: "{{ runner_script_local_path }}"
        dest: "{{ runner_script_remote_path }}"
        mode: '0755'
        owner: "{{ target_user }}"
        group: "{{ target_user }}"

    # 4. Run Generator Script to Create URL Pool File
    - name: Execute image URL list generator script
      ansible.builtin.command:
        cmd: >
          python3 {{ generator_script_remote_path }}
          --meta-dir {{ metadata_dir }}
          --url-col {{ url_column_name }}
          --output {{ url_list_file_path }}
          --count {{ target_url_pool_count }}
        creates: "{{ url_list_file_path }}"
      register: script_execution
      changed_when: script_execution.rc == 0 and "'Successfully wrote' in script_execution.stdout"
      failed_when: script_execution.rc != 0

    # *** --- CORRECTED ORDER FOR VERIFICATION/OWNERSHIP --- ***

    # 5. Verify output URL list file exists (using stat)
    - name: Verify output URL list file exists
      ansible.builtin.stat:
        path: "{{ url_list_file_path }}"
      register: output_file_stat # Register the result here
      when: script_execution is succeeded # Only run stat if the command was successful

    # 6. Ensure final output file ownership is correct
    - name: Verify output URL list file ownership
      ansible.builtin.file:
        path: "{{ url_list_file_path }}"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0644'
      # Condition now uses the registered variable correctly
      when: script_execution is succeeded and output_file_stat.stat.exists

    # 7. Fail if URL list file was not created
    - name: Fail if URL list file was not created
      ansible.builtin.fail:
        msg: "Image URL list generation failed. Check script logs or run manually on host. stdout: {{ script_execution.stdout | default('N/A') }} stderr: {{ script_execution.stderr | default('N/A') }}"
      # Condition now uses the registered variable correctly
      when:
        - script_execution is succeeded
        - not output_file_stat.stat.exists

    # 8. Display path to generated URL list file
    - name: Display path to generated URL list file
      ansible.builtin.debug:
         msg: "Image URL list prepared at {{ url_list_file_path }} on host {{ inventory_hostname }}"
      # Condition now uses the registered variable correctly
      when: output_file_stat.stat.exists